{"version":3,"sources":["Components/Loading/Loading.tsx","Components/Loading/Loading.module.scss","Hooks/useLanguages.ts","Hooks/useTextCounts.ts","Hooks/useVictoryTheme.ts","Components/Pages/StatisticsPage/TextCountChart.tsx","Hooks/useTermCounts.ts","Components/Pages/StatisticsPage/TermCountChart.tsx","Components/Pages/StatisticsPage/index.tsx"],"names":["Loading","color","className","cn","classNames","styles","loading","module","exports","useTextCounts","useQuery","getUserLanguageAsync","staleTime","data","languages","isLoading","error","useLanguages","async","textCounts","getTextCountByLanguages","Object","keys","map","key","languageCode","languageName","find","l","code","name","count","enabled","useVictoryTheme","useMediaQuery","darkTheme","VictoryTheme","grayscale","white","pie","style","labels","fill","material","TextCountChart","theme","toast","pieData","tc","x","y","width","height","padding","innerRadius","useTermCounts","termCounts","getTermCountByLanguages","TermCountChart","label","container","display","justifyContent","alignItems","flexDirection","StatisticsPage"],"mappings":"2GAAA,+DAmBeA,IATkB,IAA2B,IAA1B,MAAEC,EAAF,UAASC,GAAgB,EACzD,MAAMC,EAAKC,IAAWC,IAAOC,QAASJ,GACtC,OACE,qBAAKA,UAAWC,EAAhB,SACE,cAAC,IAAD,CAAkBF,MAAOA,Q,oBCb/BM,EAAOC,QAAU,CAAC,QAAU,2B,iCCD5B,sBAUeC,IANO,IACbC,mBAA4B,aAAa,IACvCC,eACN,CAACC,UAAW,O,+ECcFH,MAjBO,KACpB,MAAOI,KAAMC,EAAP,UAAkBC,EAAlB,MAA6BC,GAASC,cAC5C,GAAGD,EACD,MAAMA,EAER,OAAON,mBAAS,aAAaQ,UAC3B,MAAMC,QAAmBC,cACzB,OAAOC,OAAOC,KAAKH,GAAYI,KAAIC,IAC1B,CACLC,aAAcD,EACdE,aAAcZ,EAAWa,MAAKC,GAAKA,EAAEC,OAASL,IAAMM,KACpDC,MAAOZ,EAAWK,SAGrB,CAACZ,UAAW,IAAMoB,SAAUjB,K,kBCMlBkB,MArBS,KAEtB,GADwBC,YAAc,gCACjB,CAAC,IAAD,MACnB,MAAMC,EAAYC,IAAaC,UACzBC,EAAQ,OAYd,OAXAH,EAAUI,IAAM,IACXJ,EAAUI,IACbC,MAAO,IACL,UAAGL,EAAUI,WAAb,aAAG,EAAeC,MAClBC,OAAQ,IACN,UAAGN,EAAUI,WAAb,iBAAG,EAAeC,aAAlB,aAAG,EAAsBC,OAEzBC,KAAMJ,KAILF,IAAaC,UAEtB,OAAOD,IAAaO,U,+BCSPC,MAvBmB,KAChC,MAAM,UAAC7B,EAAD,MAAYC,EAAZ,KAAmBH,GAAQJ,IAC3BoC,EAAQZ,IACd,GAAIlB,IAAcF,EAChB,OAAO,cAACb,EAAA,EAAD,IAET,GAAIgB,EAEF,OADA8B,IAAM9B,MAAM,8BACL,wCAET,MAAM+B,EAAUlC,EAAKU,KAAIyB,IAChB,CAACC,EAAE,GAAD,OAAKD,EAAGtB,aAAR,aAAyBsB,EAAGjB,OAASmB,EAAGF,EAAGjB,UAGtD,OAAO,cAAC,IAAD,CACLoB,MAAO,IACPC,OAAQ,IACRC,QAAS,IACTC,YAAa,GACbT,MAAOA,EACPhC,KAAMkC,K,QCNKQ,MAjBO,KACpB,MAAO1C,KAAMC,EAAP,UAAkBC,EAAlB,MAA6BC,GAASC,cAC5C,GAAGD,EACD,MAAMA,EAER,OAAON,mBAAS,aAAaQ,UAC3B,MAAMsC,QAAmBC,cACzB,OAAOpC,OAAOC,KAAKkC,GAAYjC,KAAIC,IAC1B,CACLC,aAAcD,EACdE,aAAcZ,EAAWa,MAAKC,GAAKA,EAAEC,OAASL,IAAMM,KACpDC,MAAOyB,EAAWhC,SAGrB,CAACZ,UAAW,IAAMoB,SAAUjB,KCYlB2C,MAvBmB,KAChC,MAAM,UAAC3C,EAAD,MAAYC,EAAZ,KAAmBH,GAAQ0C,IAC3BV,EAAQZ,IACd,GAAIlB,IAAcF,EAChB,OAAO,cAACb,EAAA,EAAD,IAET,GAAIgB,EAEF,OADA8B,IAAM9B,MAAM,8BACL,wCAET,MAAM+B,EAAUlC,EAAKU,KAAIyB,IAChB,CAACW,MAAM,GAAD,OAAKX,EAAGtB,aAAR,cAA0BsB,EAAGjB,OAASmB,EAAGF,EAAGjB,UAG3D,OAAO,cAAC,IAAD,CACLoB,MAAO,IACPC,OAAQ,IACRC,QAAS,IACTC,YAAa,GACbT,MAAOA,EACPhC,KAAMkC,KCvBV,MAAM1C,EAAuC,CAC3CuD,UAAW,CACTC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,WAiBJC,UAbQ,IACd,sBAAKzB,MAAOnC,EAAOuD,UAAnB,UACL,wCACA,8BACE,cAAC,EAAD,MAEF,wCACA,8BACE,cAAC,EAAD","file":"static/js/11.ba8518f3.chunk.js","sourcesContent":["import { CircularProgress } from \"@mui/material\";\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Loading.module.scss\";\n\ninterface Props {\n  color?: \"primary\" | \"secondary\" | \"inherit\";\n  className?: string;\n}\n\nconst Loading: React.FC<Props> = ({ color, className }) => {\n  const cn = classNames(styles.loading, className);\n  return (\n    <div className={cn}>\n      <CircularProgress color={color} />\n    </div>\n  );\n};\n\nexport default Loading;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__2W7Py\"};","import {useQuery} from \"react-query\";\nimport {getUserLanguageAsync} from \"../Apis/LanguageApi\";\nimport {Language} from \"../RootReducer\";\n\nconst useTextCounts = () => {\n  return useQuery<Language[], Error>(\"languages\", () => {\n    return getUserLanguageAsync();\n  }, {staleTime: 6000000})\n}\n\nexport default useTextCounts;\n","import {useQuery} from \"react-query\";\nimport {getTextCountByLanguages} from \"../Apis/TextApi\";\nimport useLanguages from \"./useLanguages\";\n\nconst useTextCounts = () => {\n  const {data: languages, isLoading, error} = useLanguages();\n  if(error) {\n    throw error;\n  }\n  return useQuery(\"textCount\", async () => {\n    const textCounts = await getTextCountByLanguages();\n    return Object.keys(textCounts).map(key => {\n      return {\n        languageCode: key,\n        languageName: languages!.find(l => l.code === key)!.name,\n        count: textCounts[key]\n      }\n    })\n  }, {staleTime: 60000,enabled: !isLoading})\n}\n\nexport default useTextCounts;\n","import {useMediaQuery} from \"@mui/material\";\nimport {VictoryTheme} from \"victory\";\n\nconst useVictoryTheme = () => {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  if (prefersDarkMode) {\n    const darkTheme = VictoryTheme.grayscale;\n    const white = \"#fff\"\n    darkTheme.pie = {\n      ...darkTheme.pie,\n      style: {\n        ...darkTheme.pie?.style,\n        labels: {\n          ...darkTheme.pie?.style?.labels,\n          // @ts-ignore\n          fill: white,\n        }\n      }\n    }\n    return VictoryTheme.grayscale;\n  }\n  return VictoryTheme.material;\n}\n\nexport default useVictoryTheme;\n","import {VictoryPie} from \"victory\";\nimport useTextCounts from \"../../../Hooks/useTextCounts\";\nimport useVictoryTheme from \"../../../Hooks/useVictoryTheme\";\nimport Loading from \"../../Loading/Loading\";\nimport {toast} from \"react-toastify\";\nimport React from \"react\";\n\nconst TextCountChart: React.VFC = () => {\n  const {isLoading, error, data} = useTextCounts();\n  const theme = useVictoryTheme();\n  if (isLoading || !data) {\n    return <Loading/>\n  }\n  if (error) {\n    toast.error(\"failed to load text counts\")\n    return <div>Error</div>\n  }\n  const pieData = data.map(tc => {\n    return {x: `${tc.languageName}: ${tc.count}`, y: tc.count}\n  })\n\n  return <VictoryPie\n    width={400}\n    height={400}\n    padding={100}\n    innerRadius={50}\n    theme={theme}\n    data={pieData}/>\n}\n\nexport default TextCountChart;\n","import {useQuery} from \"react-query\";\nimport useLanguages from \"./useLanguages\";\nimport {getTermCountByLanguages} from \"../Apis/TermApi\";\n\nconst useTermCounts = () => {\n  const {data: languages, isLoading, error} = useLanguages();\n  if(error) {\n    throw error;\n  }\n  return useQuery(\"termCount\", async () => {\n    const termCounts = await getTermCountByLanguages();\n    return Object.keys(termCounts).map(key => {\n      return {\n        languageCode: key,\n        languageName: languages!.find(l => l.code === key)!.name,\n        count: termCounts[key]\n      }\n    })\n  }, {staleTime: 60000,enabled: !isLoading})\n}\n\nexport default useTermCounts;\n","import {VictoryPie} from \"victory\";\nimport useVictoryTheme from \"../../../Hooks/useVictoryTheme\";\nimport Loading from \"../../Loading/Loading\";\nimport {toast} from \"react-toastify\";\nimport React from \"react\";\nimport useTermCounts from \"../../../Hooks/useTermCounts\";\n\nconst TermCountChart: React.VFC = () => {\n  const {isLoading, error, data} = useTermCounts();\n  const theme = useVictoryTheme();\n  if (isLoading || !data) {\n    return <Loading/>\n  }\n  if (error) {\n    toast.error(\"failed to load term counts\")\n    return <div>Error</div>\n  }\n  const pieData = data.map(tc => {\n    return {label: `${tc.languageName}\\n ${tc.count}`, y: tc.count}\n  })\n\n  return <VictoryPie\n    width={400}\n    height={400}\n    padding={100}\n    innerRadius={50}\n    theme={theme}\n    data={pieData}/>\n}\n\nexport default TermCountChart;\n","import TextCountChart from \"./TextCountChart\";\nimport TermCountChart from \"./TermCountChart\";\nimport {CSSProperties} from \"react\";\n\nconst styles: { container: CSSProperties } = {\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  }\n}\n\nconst StatisticsPage = () => {\n  return <div style={styles.container}>\n    <div>Texts</div>\n    <div>\n      <TextCountChart/>\n    </div>\n    <div>Terms</div>\n    <div>\n      <TermCountChart/>\n    </div>\n  </div>\n}\n\nexport default StatisticsPage;\n"],"sourceRoot":""}
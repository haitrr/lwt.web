{"version":3,"sources":["Hooks/useLanguages.ts","Hooks/useLastReadText.ts","Components/Pages/HomePage/LastRead.tsx","Components/Pages/HomePage/HomePage.tsx","Components/Pages/HomePage/index.ts"],"names":["useTextCounts","useQuery","getUserLanguageAsync","staleTime","useLastReadText","data","languages","isLoading","error","useLanguages","async","text","getLastReadTextAsync","language","find","l","code","languageCode","name","enabled","LastRead","toast","progressPercentage","bookmark","termCount","toFixed","title","style","textDecoration","to","id","Button","color","variant","connectedHomePage","connect","state","isLoggedIn","user","currentLanguage","getLanguage","getLanguageAction","selectLanguage","selectLanguageAction","React","useEffect","padding","HomePage"],"mappings":"2GAAA,sBAUeA,IANO,IACbC,mBAA4B,aAAa,IACvCC,eACN,CAACC,UAAW,O,sHCYFC,MAfS,KACtB,MAAOC,KAAMC,EAAP,UAAkBC,EAAlB,MAA6BC,GAASC,cAC5C,GAAGD,EACD,MAAMA,EAER,OAAOP,mBAAS,gBAAgBS,UAC9B,MAAMC,QAAaC,cACnB,IAAID,EACF,OAAO,KAET,MAAME,EAAWP,EAAWQ,MAAKC,GAAKA,EAAEC,QAAF,OAAWL,QAAX,IAAWA,OAAX,EAAWA,EAAMM,gBACvD,MAAO,IAAIN,EAAME,SAAUA,EAAUK,QACjC,CAACf,UAAW,IAAMgB,SAAUZ,K,yBCkBrBa,MA5Ba,KAC1B,MAAM,UAACb,EAAD,MAAYC,EAAZ,KAAmBH,GAAQD,IACjC,GAAGG,EACD,OAAO,0CAOT,GAJGC,GACDa,IAAMb,MAAM,kCAGVH,EACF,OAAO,KAET,MAAMiB,GAAoC,IAAdjB,EAAKkB,SAAalB,EAAKmB,WAAWC,QAAQ,GAEtE,OAAO,gCACL,iDACA,6BAAKpB,EAAKqB,QACV,uCAAQrB,EAAKQ,YACb,6CAAcR,EAAKkB,SAAnB,YAA+BlB,EAAKmB,UAApC,YAAiDF,EAAjD,QACA,cAAC,IAAD,CAAMK,MAAO,CAACC,eAAgB,QAASC,GAAE,oBAAexB,EAAKyB,IAA7D,SACE,cAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,WAAhC,oCCTN,MAgBMC,EAAoBC,aACvBC,IAAD,CACEC,WAAYD,EAAME,KAAKD,WACvB/B,UAAW8B,EAAMvB,SAASP,UAC1BiC,gBAAiBH,EAAMvB,SAAS0B,mBAElC,CACEC,YAAaC,IACbC,eAAgBC,KARMR,EAhBQ,IAAgC,IAA/B,YAACK,EAAD,WAAcH,GAAgB,EAO/D,OANAO,IAAMC,WAAU,KACVR,GACFG,MAED,IAEIH,EACL,qBAAKV,MAAO,CAACmB,QAAS,QAAtB,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAUjB,GAAG,cCzBFkB","file":"static/js/13.78f03b13.chunk.js","sourcesContent":["import {useQuery} from \"react-query\";\nimport {getUserLanguageAsync} from \"../Apis/LanguageApi\";\nimport {Language} from \"../RootReducer\";\n\nconst useTextCounts = () => {\n  return useQuery<Language[], Error>(\"languages\", () => {\n    return getUserLanguageAsync();\n  }, {staleTime: 6000000})\n}\n\nexport default useTextCounts;\n","import {useQuery} from \"react-query\";\nimport useLanguages from \"./useLanguages\";\nimport {getLastReadTextAsync} from \"../Apis/TextApi\";\n\nconst useLastReadText = () => {\n  const {data: languages, isLoading, error} = useLanguages();\n  if(error) {\n    throw error;\n  }\n  return useQuery(\"lastReadText\", async () => {\n    const text = await getLastReadTextAsync()\n    if(!text) {\n      return null;\n    }\n    const language = languages!.find(l => l.code === text?.languageCode)\n    return {...text, language: language!.name}\n     }, {staleTime: 60000,enabled: !isLoading})\n}\n\nexport default useLastReadText;\n","import {toast} from \"react-toastify\";\nimport useLastReadText from \"../../../Hooks/useLastReadText\";\nimport {Link} from 'react-router-dom'\nimport {Button} from \"@mui/material\";\nimport React from \"react\";\n\nconst LastRead: React.VFC = () => {\n  const {isLoading, error, data} = useLastReadText();\n  if(isLoading) {\n    return <div>Loading</div>\n  }\n\n  if(error) {\n    toast.error(\"failed to load last read text\");\n  }\n\n  if(!data) {\n    return null\n  }\n  const progressPercentage = (data.bookmark*100/data.termCount).toFixed(2)\n\n  return <div>\n    <h2>Previously read</h2>\n    <h3>{data.title}</h3>\n    <h4>{`${data.language}`}</h4>\n    <h4>{`Done: ${data.bookmark}/${data.termCount}(${progressPercentage}%)`}</h4>\n    <Link style={{textDecoration: \"none\"}} to={`text/read/${data.id}`}>\n      <Button color=\"primary\" variant=\"outlined\">\n        Continue reading\n      </Button>\n    </Link>\n  </div>\n}\n\nexport default LastRead\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router\";\nimport {\n  getLanguageAction,\n  selectLanguageAction,\n} from \"../../../Actions/LanguageAction\";\nimport {RootState} from \"../../../RootReducer\";\nimport LastRead from \"./LastRead\";\n\ninterface Props {\n  getLanguage: Function;\n  isLoggedIn: boolean;\n}\n\n/**\n * Home page\n */\nconst HomePage: React.FC<Props> = ({getLanguage, isLoggedIn}) => {\n  React.useEffect(() => {\n    if (isLoggedIn) {\n      getLanguage();\n    }\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return isLoggedIn ? (\n    <div style={{padding: \"2rem\"}}>\n      <LastRead/>\n    </div>\n  ) : (\n    <Redirect to=\"/login\"/>\n  );\n}\n\nconst connectedHomePage = connect(\n  (state: RootState) => ({\n    isLoggedIn: state.user.isLoggedIn,\n    languages: state.language.languages,\n    currentLanguage: state.language.currentLanguage,\n  }),\n  {\n    getLanguage: getLanguageAction,\n    selectLanguage: selectLanguageAction,\n  }\n)(HomePage);\nexport {connectedHomePage as HomePage};\n","/**\n * Homepage\n */\nimport {HomePage} from \"./HomePage\";\n\nexport default HomePage;\n"],"sourceRoot":""}
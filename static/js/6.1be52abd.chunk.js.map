{"version":3,"sources":["Enums.ts","Components/Loading/Loading.tsx","Components/Term/Term.module.scss","Components/Inputs/LanguageSelect/LanguageSelect.tsx","Components/Inputs/LanguageSelect/LanguageSelect.module.scss","Components/Loading/Loading.module.scss","Hooks/useDidMountEffect.ts","Components/Pages/TextReadPage/TextReadPage.module.scss","Components/Inputs/LanguageSelect/index.ts","Components/Forms/TermEditForm/TermEditForm.module.scss","Components/Inputs/LearningLevelSelect/LearningLevelSelect.module.scss","Components/Term/TermTooltip/Title.module.scss","Components/Pages/TextReadPage/GoToBookmarkButton/GoToBookmarkButton.module.scss","Components/SingleBarChart/SingleBarChart.module.scss","Components/Forms/TermEditForm/TermContent.tsx","Components/Inputs/LearningLevelSelect/Option.tsx","Components/Inputs/LearningLevelSelect/LearningLevelSelect.tsx","Components/Inputs/LearningLevelSelect/index.ts","textNormalizer.ts","Selectors/TermSelectors.ts","Selectors/UserSelectors.ts","Hooks/usePrevious.ts","Components/Forms/TermEditForm/index.tsx","Components/Term/TermButton.tsx","Components/Term/TermTooltip/TermAnchor.tsx","Components/Term/TermTooltip/Title.tsx","Components/Term/TermTooltip/Content.tsx","Components/Term/TermTooltip/PopoverBody.tsx","Components/Term/TermTooltip/index.tsx","Components/Term/SkippedTerm.tsx","Components/Term/index.tsx","Components/Pages/TextReadPage/ProgressBar.tsx","Components/Pages/TextReadPage/GoToBookmarkButton/index.tsx","Components/Term/TermObserver.tsx","Components/Pages/TextReadPage/ContentPanel.tsx","Components/SingleBarChart/index.tsx","Components/Pages/TextReadPage/TextStatistic.tsx","Components/Pages/TextReadPage/TextTitle.tsx","Components/Pages/TextReadPage/TextReadPage.tsx","Components/Pages/TextReadPage/index.ts"],"names":["TermLearningLevel","Skipped","Ignored","UnKnow","Learning1","Learning2","Learning3","Learning4","Learning5","WellKnow","LearningTermLevels","LanguageCode","English","TermLearningColor","styles","termSkipped","termIgnored","termUnknown","termLearning1","termLearning2","termLearning3","termLearning4","termLearning5","termWellKnown","TermLearningLevelShortcut","getNextLearningLevel","learningLevel","getPreviousLearningLevel","isLearningTerm","includes","importantColors","Loading","color","className","cn","classNames","loading","module","exports","connect","state","languages","language","value","onChange","disabled","name","select","variant","id","labelId","label","map","code","useDidMountEffect","func","deps","didMount","useRef","useEffect","current","LanguageSelect","TermContent","term","text","content","onCopy","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","title","style","Math","min","count","Option","onClick","children","selected","option","role","tabIndex","onKeyDown","options","ol","LearningLevelSelect","container","val","normalize","languageCode","doc","compromise","whitespace","case","punctuation","unicode","contractions","acronyms","parentheses","possessives","plurals","verbs","honorifics","toLowerCase","out","selectEditingTermValue","readingText","Error","terms","editingTerm","selectDictionaryLanguage","user","setting","languageSettings","find","l","dictionaryLanguageCode","usePrevious","ref","React","dictionaryLanguage","index","setEditingTerm","setEditingTermAction","createTerm","createTermAction","editTerm","editTermAction","dictionaryTerm","dictionaryTermMeaningAction","formRef","createRef","dictionary","setDictionary","useState","lookingUpDictionary","lookedUpDictionary","prevProps","meaning","finally","setValues","values","handleSubmit","editedTerm","handleBetter","e","preventDefault","newValue","isActionDisabled","initialValues","onSubmit","innerRef","handleChange","setFieldValue","handleBlur","form","component","TextField","onBlur","field","InputProps","classes","input","InputLabelProps","shrink","fullWidth","minRows","maxRows","multiline","initialValue","buttons","saveButton","Button","type","LAST_BEGIN_INDEX_ID","ownProps","isLastBeginIndex","termLastBeginIndex","setBookmark","setBookmarkAction","selectTerm","selectTermAction","bookmark","buttonRef","onTermClick","termCount","termId","s","borderBottomColor","TermAnchor","onMouseEnter","onMouseLeave","Title","Content","better","worse","display","justifyContent","marginLeft","PopoverBody","Box","p","maxWidth","Paper","padding","readingLanguageCode","textId","setSelectingTerm","onSpeak","onHover","setLoading","dictionaried","setDictionaried","anchorEl","setAnchorEl","handleSetBookmark","hideTimout","leavePopoverTimout","dictionaryTimeout","hoverTimeout","handleMouseLeave","setTimeout","clearTimeout","open","Boolean","event","currentTarget","then","Popper","whiteSpace","placement","newTerm","SkippedTerm","isLastBeginTerm","Term","getTermMeaning","getTermCountInText","loadTermCountInText","loadTermsMeaning","handleTermClick","window","innerWidth","getTermMeaningAction","getTermCountInTextAction","memo","nextProps","ProgressBar","total","height","done","defaultProps","viewingTermIndex","Fab","button","round","setViewingTermTimeout","setViewingTerm","setViewingTermAction","inView","useInView","threshold","handleTermVisible","displayTerms","renderingLast","loadTerms","begin","termIndexBegin","end","termIndexEnd","getTextTerms","getTextTermsAction","setTermIndexBegin","setTermIndexBeginAction","setTermIndexEnd","setTermIndexEndAction","max","floor","scrollToLast","bookmarkEl","document","getElementById","scrollIntoView","block","lastBeginEl","termElements","i","push","onScroll","stopPropagation","target","scrollTop","scrollHeight","clientHeight","contentPanel","behavior","SingleBarChart","data","sum","reduce","a","b","bar","item","section","paddingLeft","paddingRight","flex","flexDirection","textAlign","renderItem","termsCountByLearningLevel","loadTermsCountByLearningLevel","loadReadingTexttermsCountByLearningLevelAction","bookmarkLL","prevBookmarkLL","termCountByLearningLevel","statistic","learningStatistic","Object","keys","forEach","practice","getPracticeCount","termLearned","termLearning","width","titleSection","TextReadPage","readText","match","params","utt","SpeechSynthesisUtterance","setSpeechVoice","languageS","voices","speechSynthesis","getVoices","lang","speakCode","googleVoice","v","voice","onvoiceschanged","readPane","cancel","speak","termEditForm","readTextAction"],"mappings":"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","file":"static/js/6.1be52abd.chunk.js","sourcesContent":["import styles from \"./Components/Term/Term.module.scss\";\n\nexport const TermLearningLevel: { [key: string]: string } = {\n  Skipped: \"skipped\",\n\n  Ignored: \"ignored\",\n\n  UnKnow: \"unknown\",\n\n  Learning1: \"learning-1\",\n\n  Learning2: \"learning-2\",\n\n  Learning3: \"learning-3\",\n\n  Learning4: \"learning-4\",\n\n  Learning5: \"learning-5\",\n\n  WellKnow: \"well-known\",\n};\n\nexport const LearningTermLevels = [\n  TermLearningLevel.UnKnow,\n  TermLearningLevel.Learning1,\n  TermLearningLevel.Learning2,\n  TermLearningLevel.Learning3,\n  TermLearningLevel.Learning4,\n  TermLearningLevel.Learning5,\n];\n\nexport const LanguageCode = {\n  English: \"en\",\n};\n\nexport const TermLearningColor = {\n  [TermLearningLevel.Skipped]: styles.termSkipped,\n\n  [TermLearningLevel.Ignored]: styles.termIgnored,\n\n  [TermLearningLevel.UnKnow]: styles.termUnknown,\n\n  [TermLearningLevel.Learning1]: styles.termLearning1,\n\n  [TermLearningLevel.Learning2]: styles.termLearning2,\n\n  [TermLearningLevel.Learning3]: styles.termLearning3,\n\n  [TermLearningLevel.Learning4]: styles.termLearning4,\n\n  [TermLearningLevel.Learning5]: styles.termLearning5,\n\n  [TermLearningLevel.WellKnow]: styles.termWellKnown,\n};\n\nexport const TermLearningLevelShortcut = {\n  [TermLearningLevel.Skipped]: \"S\",\n\n  [TermLearningLevel.Ignored]: \"I\",\n\n  [TermLearningLevel.UnKnow]: \"UK\",\n\n  [TermLearningLevel.Learning1]: \"I\",\n\n  [TermLearningLevel.Learning2]: \"II\",\n\n  [TermLearningLevel.Learning3]: \"II\",\n\n  [TermLearningLevel.Learning4]: \"IV\",\n\n  [TermLearningLevel.Learning5]: \"V\",\n\n  [TermLearningLevel.WellKnow]: \"WK\",\n};\n\nexport const getNextLearningLevel = (learningLevel: string) => {\n  switch (learningLevel) {\n    case TermLearningLevel.UnKnow:\n      return TermLearningLevel.Learning1;\n    case TermLearningLevel.Learning1:\n      return TermLearningLevel.Learning2;\n    case TermLearningLevel.Learning2:\n      return TermLearningLevel.Learning3;\n    case TermLearningLevel.Learning3:\n      return TermLearningLevel.Learning4;\n    case TermLearningLevel.Learning4:\n      return TermLearningLevel.Learning5;\n    case TermLearningLevel.Learning5:\n      return TermLearningLevel.WellKnow;\n    default:\n      return learningLevel;\n  }\n};\n\nexport const getPreviousLearningLevel = (learningLevel: string) => {\n  switch (learningLevel) {\n    case TermLearningLevel.UnKnow:\n      return TermLearningLevel.Ignored;\n    case TermLearningLevel.Learning1:\n      return TermLearningLevel.UnKnow;\n    case TermLearningLevel.Learning2:\n      return TermLearningLevel.Learning1;\n    case TermLearningLevel.Learning3:\n      return TermLearningLevel.Learning2;\n    case TermLearningLevel.Learning4:\n      return TermLearningLevel.Learning3;\n    case TermLearningLevel.Learning5:\n      return TermLearningLevel.Learning4;\n    case TermLearningLevel.WellKnow:\n      return TermLearningLevel.Learning5;\n    default:\n      return learningLevel;\n  }\n};\n\nexport const isLearningTerm = (learningLevel: string) =>\n  LearningTermLevels.includes(learningLevel);\n\nexport const importantColors = [\n  \"#E50027\",\n  \"#E5000F\",\n  \"#E50800\",\n  \"#E52000\",\n  \"#E53800\",\n  \"#E55000\",\n  \"#E56800\",\n  \"#E68000\",\n  \"#E69701\",\n  \"#E6AF01\",\n  \"#E6C701\",\n  \"#E6DF01\",\n  \"#D6E601\",\n  \"#BEE701\",\n  \"#A7E701\",\n  \"#8FE702\",\n  \"#77E702\",\n  \"#60E702\",\n  \"#48E702\",\n  \"#31E802\",\n  \"#19E802\",\n  \"#02E803\",\n  \"#03E81B\",\n  \"#03E833\",\n  \"#03E84B\",\n  \"#03E963\",\n  \"#03E97B\",\n  \"#03E993\",\n  \"#03E9AB\",\n  \"#04E9C3\",\n  \"#04E9DB\",\n  \"#04E0EA\",\n  \"#04C9EA\",\n  \"#04B1EA\",\n  \"#0499EA\",\n  \"#0482EA\",\n  \"#056AEA\",\n  \"#0553EB\",\n  \"#053BEB\",\n  \"#0523EB\",\n  \"#050CEB\",\n  \"#1705EB\",\n  \"#2F05EB\",\n  \"#4706EC\",\n  \"#5F06EC\",\n  \"#7706EC\",\n  \"#8F06EC\",\n  \"#A706EC\",\n  \"#BF06EC\",\n  \"#D707ED\",\n];\n","import { CircularProgress } from \"@mui/material\";\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Loading.module.scss\";\n\ninterface Props {\n  color?: \"primary\" | \"secondary\" | \"inherit\";\n  className?: string;\n}\n\nconst Loading: React.FC<Props> = ({ color, className }) => {\n  const cn = classNames(styles.loading, className);\n  return (\n    <div className={cn}>\n      <CircularProgress color={color} />\n    </div>\n  );\n};\n\nexport default Loading;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"term\":\"Term_term__2-NZg\",\"termCount\":\"Term_termCount__DM8Pp\",\"termIgnored\":\"Term_termIgnored__1hr4Y\",\"termSkipped\":\"Term_termSkipped__KPHim\",\"termUnknown\":\"Term_termUnknown__1mQqj\",\"termLearning1\":\"Term_termLearning1__y3Qmv\",\"termLearning2\":\"Term_termLearning2__1Z9Ke\",\"termLearning3\":\"Term_termLearning3__2rFg-\",\"termLearning4\":\"Term_termLearning4__2oG1C\",\"termLearning5\":\"Term_termLearning5__1dCC7\",\"termWellKnown\":\"Term_termWellKnown__2X013\",\"termLearned\":\"Term_termLearned__1HaXE\",\"termLearning\":\"Term_termLearning__3OKz8\",\"bookmark\":\"Term_bookmark__2vKqX\"};","import {Select, MenuItem, FormControl, InputLabel} from \"@mui/material\";\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport {connect} from \"react-redux\";\nimport styles from \"./LanguageSelect.module.scss\";\nimport {Language, RootState} from \"../../../RootReducer\";\n\ninterface StateProps {\n  languages: Language[];\n}\n\ninterface LanguageSelectProps {\n  value: string | null;\n  className?: string | undefined;\n  onChange?: any;\n  disabled?: boolean;\n  name: string;\n}\n\ntype Props = StateProps & LanguageSelectProps;\n\nconst LanguageSelect: React.FC<Props> =\n  ({\n     languages,\n     value = \"\",\n     onChange,\n     disabled = false,\n     className = undefined,\n     name,\n   }) => {\n\n    const cn = classNames(className, styles.select);\n    return (\n      <FormControl variant=\"outlined\" className={cn}>\n        <InputLabel id=\"language-select-label\">Language</InputLabel>\n        <Select\n          labelId=\"language-select-label\"\n          onChange={onChange}\n          label=\"Language\"\n          value={value}\n          color=\"primary\"\n          name={name}\n          disabled={disabled || false}\n        >\n          {languages.map((language) => (\n            <MenuItem key={language.code} value={language.code}>\n              {language.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    );\n  }\n\nexport default connect<StateProps, void, LanguageSelectProps, RootState>(\n  (state: RootState) => ({\n    languages: state.language.languages,\n  }))(LanguageSelect);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"LanguageSelect_select__2dF_z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__2W7Py\"};","import { useEffect, useRef } from 'react';\n\nconst useDidMountEffect = (func: Function, deps: any[]) => {\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) func();\n    else didMount.current = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\nexport default useDidMountEffect;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"readPane\":\"TextReadPage_readPane__2TSOs\",\"titleSection\":\"TextReadPage_titleSection__35_to\",\"contentPanel\":\"TextReadPage_contentPanel__9PD7z\",\"loading\":\"TextReadPage_loading__3LVKY\",\"progress\":\"TextReadPage_progress__2_53X\",\"done\":\"TextReadPage_done__1_ILJ\",\"termEditForm\":\"TextReadPage_termEditForm__jOZSl\"};","/**\n * language select\n */\nimport LanguageSelect from \"./LanguageSelect\";\n\nexport default LanguageSelect;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TermEditForm_form__1dvye\",\"buttons\":\"TermEditForm_buttons__3MX29\",\"content\":\"TermEditForm_content__3rmo6\",\"title\":\"TermEditForm_title__2rdE8\",\"language\":\"TermEditForm_language__g2PvW\",\"meaning\":\"TermEditForm_meaning__FYuOM\",\"saveButton\":\"TermEditForm_saveButton___s4X8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"LearningLevelSelect_select__3u6MF\",\"container\":\"LearningLevelSelect_container__EtMtz\",\"option\":\"LearningLevelSelect_option__qj0uW\",\"selected\":\"LearningLevelSelect_selected__RSvhT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"meaning\":\"Title_meaning__2li-J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"GoToBookmarkButton_button__35DdT\",\"icon\":\"GoToBookmarkButton_icon__3S2yj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"SingleBarChart_bar__2oalE\",\"section\":\"SingleBarChart_section__3rM48\"};","import React from \"react\";\nimport { toast } from \"react-toastify\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport styles from \"./TermEditForm.module.scss\";\nimport { importantColors } from \"../../../Enums\";\nimport {Term} from \"../../../Reducers/TextReducer\";\n\ninterface Props {\n  term: Term;\n}\n\nconst TermContent: React.FC<Props> = ({ term }) => (\n  <CopyToClipboard\n    text={term.content}\n    onCopy={() => {\n      toast.info('Copied to clipboard.', {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n    }\n  >\n    <div\n      className={styles.title}\n      style={{ color: importantColors[Math.min(term.count, 49)] }}\n    >\n      {`${term.content}(${term.count ?? \"-\"})`}\n    </div>\n  </CopyToClipboard>\n);\n\nexport default TermContent;\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport styles from \"./LearningLevelSelect.module.scss\";\n\ninterface Props {\n  onClick: () => void;\n  className: string;\n  selected: boolean;\n}\n\nconst Option: React.FC<Props> = ({\n  onClick,\n  className,\n  children,\n  selected,\n}) => {\n  const cn = classNames(className, styles.option, {\n    [styles.selected]: selected,\n  });\n  return (\n    <div\n      role=\"button\"\n      tabIndex={-1}\n      onKeyDown={onClick}\n      onClick={onClick}\n      className={cn}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Option;\n","import React from \"react\";\nimport styles from \"./LearningLevelSelect.module.scss\";\nimport {\n  TermLearningLevel,\n  TermLearningColor,\n  TermLearningLevelShortcut,\n} from \"../../../Enums\";\nimport Option from \"./Option\";\n\nconst optionLevels = [\n  TermLearningLevel.UnKnow,\n  TermLearningLevel.Learning1,\n  TermLearningLevel.Learning2,\n  TermLearningLevel.Learning3,\n  TermLearningLevel.Learning4,\n  TermLearningLevel.Learning5,\n  TermLearningLevel.WellKnow,\n  TermLearningLevel.Ignored,\n];\n\nconst options = optionLevels.map((ol) => ({\n  value: ol,\n  className: TermLearningColor[ol],\n  label: TermLearningLevelShortcut[ol],\n}));\n\ninterface Props {\n  onChange: (value: string) => void;\n  value: string;\n}\n\nconst LearningLevelSelect: React.FC<Props> = ({onChange, value}) => {\n  const onClick = (val: string) => {\n    onChange(val);\n  };\n\n  return (\n    <div className={styles.container}>\n      {options.map((option) => (\n        <Option\n          key={option.value}\n          className={option.className}\n          selected={option.value === value}\n          onClick={() => onClick(option.value)}\n        >\n          {option.label}\n        </Option>\n      ))}\n    </div>\n  );\n};\n\nexport default LearningLevelSelect;\n","import LearningLevelSelect from \"./LearningLevelSelect\";\n\nexport default LearningLevelSelect;\n","import compromise from \"compromise\";\n\nconst normalize = (text: string, languageCode: string) => {\n  if (languageCode === \"en\") {\n    const doc = compromise(text);\n    doc.normalize({\n      // remove hyphens, newlines, and force one space between words\n      whitespace: true,\n      // keep only first-word, and 'entity' titlecasing\n      case: true,\n      // remove commas, semicolons - but keep sentence-ending punctuation\n      punctuation: true,\n      // visually romanize/anglicize 'Björk' into 'Bjork'.\n      unicode: true,\n      // turn \"isn't\" to \"is not\"\n      contractions: false,\n      // remove periods from acronyms, like 'F.B.I.'\n      acronyms: true,\n\n      // ---these ones don't run unless you want them to---\n\n      // remove words inside brackets (like these)\n      parentheses: false,\n      // turn \"Google's tax return\" to \"Google tax return\"\n      possessives: true,\n      // turn \"batmobiles\" into \"batmobile\"\n      plurals: true,\n      // turn all verbs into Infinitive form - \"I walked\" → \"I walk\"\n      verbs: true,\n      // turn 'Vice Admiral John Smith' to 'John Smith'\n      honorifics: false\n    });\n    doc.toLowerCase();\n    return doc.out();\n  }\n  return text;\n};\n\nexport default normalize;\n","import {RootState} from \"../RootReducer\";\n\nexport const selectEditingTermValue = (state: RootState) => {\n  if (!state.text.readingText) {\n    throw new Error(\"not reading text\")\n  }\n  return state.text.readingText.terms[state.term.editingTerm!];\n};\n","import {RootState} from \"../RootReducer\";\n\nexport const selectDictionaryLanguage = (state: RootState) => {\n  if (!state.text.readingText) {\n    throw new Error(\"not reading text\")\n  }\n\n  const language = state.user?.setting?.languageSettings.find(\n    l => l.languageCode === state.text.readingText!.languageCode\n  );\n  if (!language) {\n    throw new Error(\"language not found\")\n  }\n  return language.dictionaryLanguageCode;\n};\n","import React from \"react\";\n\nexport const usePrevious = <T>(value: T): T | undefined => {\n  const ref = React.useRef<T>();\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Button, TextField} from \"@mui/material\";\nimport TermContent from \"./TermContent\";\nimport LearningLevelSelect from \"../../Inputs/LearningLevelSelect\";\nimport normalize from \"../../../textNormalizer\";\nimport LanguageSelect from \"../../Inputs/LanguageSelect\";\nimport styles from \"./TermEditForm.module.scss\";\nimport {\n  createTermAction,\n  dictionaryTermMeaningAction,\n  editTermAction,\n  setEditingTermAction,\n} from \"../../../Actions/TermAction\";\nimport {selectEditingTermValue} from \"../../../Selectors/TermSelectors\";\nimport {selectDictionaryLanguage} from \"../../../Selectors/UserSelectors\";\nimport {getNextLearningLevel, TermLearningLevel} from \"../../../Enums\";\nimport {usePrevious} from \"../../../Hooks/usePrevious\";\nimport {Language, RootState} from \"../../../RootReducer\";\nimport {Formik, Form, Field, FormikProps, FieldProps} from \"formik\";\nimport {Term} from \"../../../Reducers/TextReducer\";\n\ninterface Props {\n  value: Term;\n  dictionaryLanguage: string\n  languages: Language[]\n  languageCode: string\n  dictionaryTerm: Function\n  editingTerm: number | null\n  editTerm: Function\n  createTerm: Function\n  setEditingTerm: Function\n  index: number | null;\n  className: string\n}\n\ninterface FormValues {\n  content: string;\n  meaning: string;\n  learningLevel: string;\n}\n\nconst TermEditForm: React.FC<Props> = (\n  {\n    value,\n    dictionaryLanguage,\n    languages,\n    languageCode,\n    dictionaryTerm,\n    editingTerm,\n    editTerm,\n    createTerm,\n    setEditingTerm,\n    className,\n    index,\n  }) => {\n  const formRef = React.createRef<FormikProps<FormValues>>();\n\n  const [dictionary, setDictionary] = React.useState({lookingUpDictionary: false, lookedUpDictionary: false})\n\n  const prevProps = usePrevious({index, value})\n\n  React.useEffect(() => {\n    if (index !== prevProps?.index) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      setDictionary({...dictionary, lookedUpDictionary: false})\n    }\n\n    if (\n      // meaning is loaded but empty\n      value.content &&\n      // unknown term\n      value.meaning === \"\" &&\n      !dictionary.lookedUpDictionary\n    ) {\n      const {code} = languages.find((l) => l.code === languageCode)!;\n      // eslint-disable-next-line react/no-did-update-set-state\n      setDictionary({lookedUpDictionary: true, lookingUpDictionary: true})\n      dictionaryTerm(\n        normalize(value.content, code),\n        languageCode,\n        dictionaryLanguage,\n        index\n      ).finally(() => setDictionary({...dictionary, lookingUpDictionary: false}))\n    }\n    if (value.index !== prevProps?.value.index) {\n      if (formRef.current) {\n        formRef.current?.setValues({...value});\n      }\n    } else if (value.meaning !== prevProps?.value.meaning) {\n      if (formRef.current) {\n        formRef.current.setValues({...formRef.current.values, meaning: value.meaning});\n      }\n    }\n  }, [index, value?.content, value?.meaning]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleSubmit = (values: any) => {\n    const editedTerm = {...value, ...values};\n    if (!value.id) {\n      createTerm(editedTerm);\n    } else {\n      editTerm(editedTerm);\n    }\n    setEditingTerm(null);\n  };\n\n  const handleBetter = (e: any) => {\n    const value = formRef.current!.values;\n    e.preventDefault();\n    const newValue = {\n      ...value,\n      learningLevel: getNextLearningLevel(value.learningLevel),\n    };\n    formRef.current?.setValues(newValue);\n    handleSubmit(newValue);\n  };\n\n  const isActionDisabled = () => {\n    return (\n      dictionary.lookingUpDictionary ||\n      (value.learningLevel !== TermLearningLevel.UnKnow &&\n        value.meaning === null)\n    );\n  };\n\n  if (editingTerm == null || !value) {\n    return null;\n  }\n\n  return (\n    <Formik initialValues={value} onSubmit={handleSubmit} innerRef={formRef}>\n      {({values, handleChange, setFieldValue, handleBlur}) => {\n        return (\n          <Form>\n            <div className={`${className} ${styles.form}`}>\n              <TermContent term={value}/>\n              <Field\n                className={styles.content}\n                label=\"Content\"\n                name=\"content\"\n                component={TextField}\n                value={values.content}\n              >\n              </Field>\n              <Field\n                className={styles.language}\n                name=\"languageCode\"\n                value={languageCode}\n                component={LanguageSelect}\n                disabled\n              >\n              </Field>\n\n              <Field\n                name=\"meaning\"\n                value={values.meaning}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              >\n                {({field}: FieldProps<FormValues>) => {\n                  return (\n                    <TextField\n                      key=\"meaning\"\n                      variant=\"outlined\"\n                      InputProps={{classes: {input: styles.meaning}}}\n                      InputLabelProps={{shrink: true}}\n                      label=\"Meaning\"\n                      value={field.value}\n                      disabled={isActionDisabled()}\n                      onChange={field.onChange}\n                      name={field.name}\n                      onBlur={field.onBlur}\n                      fullWidth\n                      minRows={2}\n                      maxRows={5}\n                      multiline\n                    />\n                  );\n                }\n                }\n              </Field>\n              <Field\n                name=\"learningLevel\"\n                initialValue={value.learningLevel}\n                onBlur={handleBlur}\n                value={values.learningLevel}\n                className={styles.learningLevel}\n                onChange={(value: string) => {\n                  setFieldValue(\"learningLevel\", value)\n                }\n                }\n                component={LearningLevelSelect}\n              />\n              <div className={styles.buttons}>\n                <div className={styles.saveButton}>\n                  <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    onClick={handleBetter}\n                    disabled={isActionDisabled()}\n                    className={styles.saveButton}\n                  >\n                    Better\n                  </Button>\n                </div>\n                <div className={styles.saveButton}>\n                  <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    type=\"submit\"\n                    disabled={isActionDisabled()}\n                    className={styles.saveButton}\n                  >\n                    Save\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n}\nexport default connect(\n  (state: RootState) => {\n    if (!state.text.readingText) {\n      throw new Error(\"not reading text\")\n    }\n    return ({\n      value: {...selectEditingTermValue(state)},\n      dictionaryLanguage: selectDictionaryLanguage(state),\n      editingTerm: state.term.editingTerm,\n      languageCode: state.text.readingText.languageCode,\n      languages: state.language.languages,\n      index: state.term.editingTerm,\n    })\n  },\n  {\n    setEditingTerm: setEditingTermAction,\n    createTerm: createTermAction,\n    editTerm: editTermAction,\n    dictionaryTerm: dictionaryTermMeaningAction,\n  }\n)(TermEditForm);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport classNames from \"classnames\";\nimport styles from \"./Term.module.scss\";\nimport {setBookmarkAction, selectTermAction} from \"../../Actions/TextAction\";\nimport {\n  importantColors,\n  isLearningTerm,\n  TermLearningColor,\n} from \"../../Enums\";\nimport {RootState} from \"../../RootReducer\";\nimport {Term} from \"../../Reducers/TextReducer\";\n\nexport const LAST_BEGIN_INDEX_ID = \"last-begin-index\";\n\ninterface StateProps {\n  id: number;\n  isLastBeginIndex: boolean;\n}\n\ninterface OwnProps {\n  term: Term;\n  onClick: (e: React.MouseEvent | React.KeyboardEvent) => void;\n  bookmark: boolean;\n}\n\ninterface DispatchProps {\n  setBookmark: (textId: number, termIndex: number) => void;\n  selectTerm: (termIndex: number) => void;\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nconst TermButton: React.FC<Props> = ({setBookmark, id, bookmark, isLastBeginIndex, selectTerm, term, onClick}) => {\n  const buttonRef = React.useRef<HTMLSpanElement>(null);\n\n  const onTermClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    selectTerm(term.index);\n    setBookmark(id, term.index);\n    onClick(e);\n  };\n\n  const className = classNames(\n    styles.term,\n    TermLearningColor[term.learningLevel],\n    {\n      [styles.bookmark]: bookmark,\n      [styles.termCount]: term.count && isLearningTerm(term.learningLevel),\n    }\n  );\n\n  let termId;\n  if (bookmark) {\n    termId = \"bookmark\";\n  } else if (isLastBeginIndex) {\n    termId = LAST_BEGIN_INDEX_ID;\n  }\n\n  const s =\n    term.count && isLearningTerm(term.learningLevel)\n      ? {\n        borderBottomColor: importantColors[Math.min(term.count, 49)],\n      }\n      : undefined;\n\n  return (\n    <span\n      tabIndex={-1}\n      role=\"button\"\n      id={termId}\n      className={className}\n      style={s}\n      ref={buttonRef}\n      onClick={onTermClick}\n      onKeyDown={onTermClick}\n    >\n        {term.content}\n      </span>\n  );\n}\n\nexport default connect(\n  (state: RootState, ownProps: OwnProps) => {\n    if (!state.text.readingText) {\n      throw new Error();\n    }\n\n    return {\n      id: state.text.readingText.id,\n      isLastBeginIndex:\n        state.text.readingText.termLastBeginIndex === ownProps.term.index,\n    };\n  },\n  {\n    setBookmark: setBookmarkAction,\n    selectTerm: selectTermAction,\n  }\n)(TermButton);\n","import React from \"react\";\nimport TermButton from \"../TermButton\";\nimport { Term } from \"../../../Reducers/TextReducer\";\n\ninterface Props {\n  onMouseEnter: (event: any) => void;\n  onMouseLeave: (event: any) => void;\n  bookmark: boolean;\n  term: Term;\n  onClick: () => void;\n}\n\nconst TermAnchor: React.FC<Props> = ({\n  onMouseEnter,\n  onMouseLeave,\n  bookmark,\n  term,\n  onClick,\n}) => {\n  return (\n    <span onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n      <TermButton\n        bookmark={bookmark}\n        term={term}\n        onClick={onClick}\n      />\n    </span>\n  );\n};\n\nexport default TermAnchor;\n","import React from \"react\";\nimport { importantColors } from \"../../../Enums\";\nimport { Term } from \"../../../Reducers/TextReducer\";\nimport styles from './Title.module.scss'\n\ninterface Props {\n  term: Term;\n}\n\nconst Title: React.FC<Props> = ({ term }) => {\n  return (\n    <span>\n      {term.count ? (\n        <div style={{ color: importantColors[Math.min(term.count, 49)] }}>\n          {`${term.count} in this text.`}\n        </div>\n      ) : (\n        <div>Loading term count</div>\n      )}\n      <hr />\n      <div className={styles.meaning}>\n        {term.meaning}\n      </div>\n      <hr />\n    </span>\n  );\n};\n\nexport default Title;\n","import { Button } from \"@mui/material\";\nimport React from \"react\";\nimport { Term } from \"../../../Reducers/TextReducer\";\n\ninterface Props {\n  term: Term;\n  loading: boolean;\n  better: () => void;\n  worse: () => void;\n}\n\nconst Content: React.FC<Props> = ({ term, loading, better, worse }) => {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={better}\n        disabled={term.meaning === null || loading}\n      >\n        Better\n      </Button>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ marginLeft: \"5px\" }}\n        onClick={worse}\n        disabled={term.meaning === null || loading}\n      >\n        Worse\n      </Button>\n    </div>\n  );\n};\n\nexport default Content;\n","import { Box, Paper } from \"@mui/material\";\nimport React from \"react\";\nimport Title from \"./Title\";\nimport Content from \"./Content\";\nimport { Term } from \"../../../Reducers/TextReducer\";\n\ninterface Props {\n  onMouseLeave: () => void;\n  onMouseEnter: () => void;\n  term: Term;\n  better: () => void;\n  worse: () => void;\n  loading: boolean;\n}\n\nconst PopoverBody: React.FC<Props> = ({\n  onMouseLeave,\n  onMouseEnter,\n  term,\n  better,\n  worse,\n  loading,\n}) => {\n  return (\n    <Box\n      p={2}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      style={{ maxWidth: \"30vw\" }}\n    >\n      <Paper style={{ padding: \"1rem\" }}>\n        <Title term={term} />\n        <Content term={term} loading={loading} better={better} worse={worse} />\n      </Paper>\n    </Box>\n  );\n};\n\nexport default PopoverBody;\n","import {Popper} from \"@mui/material\";\nimport React, {useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n  dictionaryTermMeaningAction,\n  editTermAction,\n} from \"../../../Actions/TermAction\";\nimport {getNextLearningLevel, getPreviousLearningLevel} from \"../../../Enums\";\nimport {selectDictionaryLanguage} from \"../../../Selectors/UserSelectors\";\nimport {\n  selectTermAction,\n  setBookmarkAction,\n} from \"../../../Actions/TextAction\";\nimport normalize from \"../../../textNormalizer\";\nimport TermAnchor from \"./TermAnchor\";\nimport PopoverBody from \"./PopoverBody\";\nimport {RootState} from \"../../../RootReducer\";\n\ninterface Props {\n  term: any\n  bookmark: any\n  onSpeak: any\n  onClick: any\n  onHover: Function\n  dictionaryLanguage: any\n  readingLanguageCode: any\n  textId: number\n  dictionaryTerm: any\n  index: number\n  setBookmark: Function\n  setSelectingTerm: Function\n  editTerm: Function\n}\n\nconst TermTooltip: React.FC<Props> = (\n  {\n    term,\n    bookmark,\n    onSpeak,\n    onClick,\n    onHover,\n    dictionaryLanguage,\n    readingLanguageCode,\n    textId,\n    dictionaryTerm,\n    index,\n    setBookmark,\n    setSelectingTerm,\n    editTerm\n  }) => {\n  const [loading, setLoading] = useState(false);\n  const [dictionaried, setDictionaried] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const better = () => {\n    const newTerm = {\n      ...term,\n      learningLevel: getNextLearningLevel(term.learningLevel),\n    };\n    editTerm(newTerm);\n    handleSetBookmark();\n  };\n\n  const handleSetBookmark = () => {\n    setBookmark(textId, index);\n    setSelectingTerm(index);\n  };\n\n  const worse = () => {\n    const newTerm = {\n      ...term,\n      learningLevel: getPreviousLearningLevel(term.learningLevel),\n    };\n    editTerm(newTerm);\n    handleSetBookmark();\n  };\n\n  const handleDictionaryTerm = () => {\n    if (term && !dictionaried && term.meaning === \"\") {\n      // eslint-disable-next-line react/no-did-update-set-state\n      setLoading(true)\n      setDictionaried(true)\n      dictionaryTerm(\n        normalize(term.content, readingLanguageCode),\n        readingLanguageCode,\n        dictionaryLanguage,\n        index\n      ).then(() => setLoading(false))\n    }\n  };\n\n  const hideTimout = React.useRef<any>(undefined)\n  const leavePopoverTimout = React.useRef<any>(undefined)\n  const dictionaryTimeout = React.useRef<any>(undefined)\n  const hoverTimeout = React.useRef<any>(undefined)\n\n  const handleMouseEnter = (event: any) => {\n    clearTimeout(hideTimout.current);\n    clearTimeout(leavePopoverTimout.current);\n    setAnchorEl(event.currentTarget)\n    if (term && !dictionaried && term.meaning === \"\") {\n      // eslint-disable-next-line react/no-did-update-set-state\n      dictionaryTimeout.current = setTimeout(() => {\n        handleDictionaryTerm();\n      }, 100);\n    }\n    hoverTimeout.current = setTimeout(onHover, 100);\n  };\n\n  const handleMouseLeave = () => {\n    hideTimout.current = setTimeout(() => {\n      setAnchorEl(null)\n    }, 100);\n    clearTimeout(hoverTimeout.current);\n    clearTimeout(dictionaryTimeout.current);\n  };\n\n  const handleMouseEnterPopper = () => {\n    clearTimeout(hideTimout.current);\n    clearTimeout(leavePopoverTimout.current);\n  };\n\n  const open = Boolean(anchorEl);\n  return (\n    <>\n      <TermAnchor\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        bookmark={bookmark}\n        term={term}\n        onClick={onClick}\n      />\n      <Popper\n        open={open}\n        anchorEl={anchorEl}\n        style={{whiteSpace: \"pre-line\"}}\n        placement=\"top\"\n      >\n        <PopoverBody\n          onMouseEnter={handleMouseEnterPopper}\n          onMouseLeave={handleMouseLeave}\n          term={term}\n          loading={loading}\n          better={better}\n          worse={worse}\n        />\n      </Popper>\n    </>\n  );\n}\n\nexport default connect(\n  (state:RootState) => {\n    if(!state.text.readingText) {\n      throw new Error(\"not reading text\");\n    }\n    return ({\n      dictionaryLanguage: selectDictionaryLanguage(state),\n      readingLanguageCode: state.text.readingText.languageCode,\n      textId: state.text.readingText.id,\n    });\n  },\n  {\n    editTerm: editTermAction,\n    dictionaryTerm: dictionaryTermMeaningAction,\n    setBookmark: setBookmarkAction,\n    setSelectingTerm: selectTermAction,\n  }\n)(TermTooltip);\n","import React from \"react\";\nimport styles from \"./Term.module.scss\";\nimport { LAST_BEGIN_INDEX_ID } from \"./TermButton\";\nimport { Term } from \"../../Reducers/TextReducer\";\n\ninterface Props {\n  term: Term;\n  isLastBeginTerm: boolean;\n}\n\nconst SkippedTerm: React.FC<Props> = ({ term, isLastBeginTerm }) => {\n  return (\n    <span\n      className={styles.term}\n      id={isLastBeginTerm ? LAST_BEGIN_INDEX_ID : undefined}\n    >\n      {term.content}\n    </span>\n  );\n};\n\nexport default SkippedTerm;\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n  getTermMeaningAction,\n  setEditingTermAction,\n} from \"../../Actions/TermAction\";\nimport {getTermCountInTextAction} from \"../../Actions/TextAction\";\nimport {TermLearningLevel} from \"../../Enums\";\nimport TermButton from \"./TermButton\";\nimport TermTooltip from \"./TermTooltip\";\nimport SkippedTerm from \"./SkippedTerm\";\nimport {RootState} from \"../../RootReducer\";\nimport {Term as TermState} from \"../../Reducers/TextReducer\";\n\ninterface StateProps {\n  textId: number;\n  bookmark: boolean;\n  isLastBeginIndex: boolean;\n  term: TermState;\n}\n\ninterface OwnProps {\n  index: number;\n  onSpeak: (term: TermState) => void;\n}\n\ninterface DispatchProps {\n  setEditingTerm: Function;\n  getTermMeaning: (term: TermState, index: number) => void;\n  getTermCountInText: (termId: number, textId: number) => void;\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nconst Term: React.FC<Props> = (\n  {\n    term,\n    setEditingTerm,\n    getTermMeaning,\n    index,\n    getTermCountInText,\n    textId,\n    onSpeak, bookmark, isLastBeginIndex\n  }) => {\n  const handleHover = () => {\n    if (term.meaning === null) {\n      loadTermsMeaning();\n    }\n    if (!term.count) {\n      loadTermCountInText();\n    }\n    onSpeak(term);\n  };\n\n  const loadTermCountInText = () => {\n    if (term.id && !term.count) {\n      getTermCountInText(term.id, textId);\n    }\n  };\n\n  const loadTermsMeaning = () => {\n    if (\n      term.id &&\n      term.meaning === undefined &&\n      term.learningLevel !== TermLearningLevel.Ignored &&\n      term.learningLevel !== TermLearningLevel.Skipped &&\n      term.learningLevel !== TermLearningLevel.WellKnow\n    ) {\n      getTermMeaning(term, index);\n    }\n  };\n\n  const handleTermClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    e.preventDefault();\n    // load term meaning if not loaded.\n    if (!term.count) {\n      loadTermCountInText();\n    }\n    if (term.meaning === null) {\n      getTermMeaning(term, index);\n    }\n    onSpeak(term);\n    setEditingTerm(index);\n  };\n\n  if (term.learningLevel === TermLearningLevel.Skipped) {\n    return <SkippedTerm term={term} isLastBeginTerm={isLastBeginIndex}/>;\n  }\n  if (\n    term.learningLevel === TermLearningLevel.WellKnow ||\n    term.learningLevel === TermLearningLevel.Ignored ||\n    window.innerWidth < 768\n  ) {\n    return (\n      <TermButton\n        bookmark={bookmark}\n        term={term}\n        onClick={handleTermClick}\n      />\n    );\n  }\n\n  return (\n    <TermTooltip\n      onClick={handleTermClick}\n      onHover={handleHover}\n      onSpeak={onSpeak}\n      index={index}\n      term={term}\n      bookmark={bookmark}\n    />\n  );\n}\n\nexport default connect(\n  (state: RootState, ownProps: OwnProps) => {\n    if (!state.text.readingText) {\n      throw new Error();\n    }\n\n    return {\n      term: state.text.readingText.terms[ownProps.index],\n      bookmark: state.text.readingText.bookmark === ownProps.index,\n      isLastBeginIndex:\n        state.text.readingText.termLastBeginIndex === ownProps.index,\n      textId: state.text.readingText.id,\n    };\n  },\n  {\n    setEditingTerm: setEditingTermAction,\n    getTermMeaning: getTermMeaningAction,\n    getTermCountInText: getTermCountInTextAction,\n  }\n)(React.memo(Term, (prevProps, nextProps) => {\n  const {term, bookmark, isLastBeginIndex} = prevProps;\n  return !(\n    nextProps.term.learningLevel !== term.learningLevel ||\n    nextProps.term.meaning !== term.meaning ||\n    nextProps.term.count !== term.count ||\n    nextProps.bookmark !== bookmark ||\n    isLastBeginIndex !== nextProps.isLastBeginIndex\n  );\n}));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styles from \"./TextReadPage.module.scss\";\nimport { RootState } from \"../../../RootReducer\";\n\ninterface StateProps {\n  current: number;\n  total: number;\n}\n\ntype Props = StateProps;\n\nconst ProgressBar: React.FC<Props> = ({ current, total }) => (\n  <div className={styles.progress}>\n    <div\n      style={{\n        height: `${(current * 100) / total}%`,\n      }}\n      className={styles.done}\n    />\n  </div>\n);\n\nProgressBar.defaultProps = {\n  current: 0,\n};\n\nexport default connect<StateProps, null, {}, RootState>(\n  (state: RootState) => {\n    if (!state.text.readingText) throw new Error();\n    return {\n      current: state.text.readingText.viewingTermIndex,\n      total: state.text.readingText.termCount,\n    };\n  }\n)(ProgressBar);\n","import React from \"react\";\nimport { Fab } from \"@mui/material\";\nimport { connect } from \"react-redux\";\nimport styles from \"./GoToBookmarkButton.module.scss\";\nimport { RootState } from \"../../../../RootReducer\";\n\ninterface OwnProps {\n  onClick: () => void;\n}\n\ninterface StateProps {\n  current: number;\n  total: number;\n}\n\ntype Props = OwnProps & StateProps;\n\nconst GoToBookmarkButton: React.FC<Props> = ({ onClick, current, total }) => (\n  <Fab\n    title=\"Go to bookmark\"\n    type=\"button\"\n    color=\"secondary\"\n    className={styles.button}\n    onClick={onClick}\n  >\n    {`${Math.round((current / total) * 100 * 100) / 100}%`}\n  </Fab>\n);\n\nexport default connect<StateProps, null, OwnProps, RootState>(\n  (state: RootState) => {\n    if (!state.text.readingText) throw new Error();\n    return {\n      current: state.text.readingText.bookmark,\n      total: state.text.readingText.termCount,\n    };\n  }\n)(GoToBookmarkButton);\n","import React, { PropsWithChildren } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\nimport { connect } from \"react-redux\";\nimport { setViewingTermAction } from \"../../Actions/TextAction\";\nimport { RootState } from \"../../RootReducer\";\n\ninterface OwnProps {\n  index: number;\n}\n\ninterface DispatchProps {\n  setViewingTerm: (index: number) => void;\n}\n\ntype Props = OwnProps & DispatchProps;\n\nlet setViewingTermTimeout: ReturnType<typeof setTimeout> | null;\n\nconst handleTermVisible = (\n  setViewingTerm: (index: number) => void,\n  index: number\n) => {\n  if (setViewingTermTimeout) {\n    clearTimeout(setViewingTermTimeout);\n  }\n  setViewingTermTimeout = setTimeout(() => {\n    setViewingTerm(index);\n  }, 200);\n};\n\nconst TermObserver: React.FC<PropsWithChildren<Props>> = ({\n  index,\n  children,\n  setViewingTerm,\n}) => {\n  const { ref, inView } = useInView({\n    threshold: 0,\n  });\n\n  if (inView) {\n    handleTermVisible(setViewingTerm, index);\n  }\n\n  return <span ref={ref}>{children}</span>;\n};\n\nexport default connect<void, DispatchProps, OwnProps, RootState>(null, {\n  setViewingTerm: setViewingTermAction,\n})(TermObserver);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport styles from \"./TextReadPage.module.scss\";\nimport Term from \"../../Term\";\nimport ProgressBar from \"./ProgressBar\";\nimport GoToBookmarkButton from \"./GoToBookmarkButton\";\nimport {\n  getTextTermsAction,\n  setTermIndexBeginAction,\n  setViewingTermAction,\n  setTermIndexEndAction,\n} from \"../../../Actions/TextAction\";\nimport {setEditingTermAction} from \"../../../Actions/TermAction\";\nimport Loading from \"../../Loading/Loading\";\nimport {LAST_BEGIN_INDEX_ID} from \"../../Term/TermButton\";\nimport TermObserver from \"../../Term/TermObserver\";\nimport {usePrevious} from \"../../../Hooks/usePrevious\";\nimport {Term as TermItem} from '../../../Reducers/TextReducer'\nimport {RootState} from \"../../../RootReducer\";\nimport useDidMountEffect from \"../../../Hooks/useDidMountEffect\";\n\nconst TermCountPerProgressPoint = 50;\n\nlet displayTerms;\nlet renderingLast: any;\nlet loadTerms: any;\n\ninterface Props {\n  end: number;\n  setTermIndexEnd: Function;\n  begin: number;\n  termCount: number;\n  getTextTerms: Function;\n  textId: number;\n  terms?: TermItem[],\n  editingTerm: number | null,\n  setEditingTerm: Function,\n  onSpeak: (t: TermItem) => void,\n  setViewingTerm: Function,\n  setTermIndexBegin: Function,\n}\n\nconst ContentPanel: React.FC<Props> = (\n  {\n    end,\n    setTermIndexEnd,\n    begin,\n    termCount,\n    getTextTerms,\n    textId,\n    terms = [],\n    editingTerm = null,\n    setEditingTerm,\n    onSpeak,\n    setTermIndexBegin,\n  }) => {\n  React.useEffect(() => {\n    if (window.innerWidth > 700) {\n      // desktop\n      displayTerms = 1000;\n      loadTerms = 300;\n    } else {\n      // mobile\n      displayTerms = 750;\n      loadTerms = 150;\n    }\n    setTermIndexBegin(Math.max(begin - Math.floor(displayTerms / 2), 0));\n    setTermIndexEnd(Math.min(end + displayTerms, termCount - 1));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[])\n\n  const container = React.createRef<HTMLDivElement>();\n  const [loading, setLoading] = React.useState(true)\n\n  const prevProps = usePrevious({begin, terms, end})\n  useDidMountEffect(() => {\n    if (prevProps?.begin !== undefined && begin < prevProps?.begin) {\n      getTextTerms(textId, begin, prevProps?.begin);\n    }\n\n    if (prevProps?.terms[begin] !== terms[begin]) {\n      scrollToLast();\n    }\n  }, [begin, prevProps, getTextTerms, terms, textId])\n\n  useDidMountEffect(() => {\n    if (prevProps?.end !== undefined) {\n      if (end > prevProps.end) {\n        getTextTerms(textId, prevProps.end, end);\n      }\n    }\n  }, [end, textId, prevProps, getTextTerms])\n\n  React.useEffect(() => {\n    // scroll to the bookmark ofter initial loading\n    if (terms[begin] && terms[end] && loading) {\n      setLoading(false);\n      const bookmarkEl = document.getElementById(\"bookmark\");\n      if (bookmarkEl) {\n        bookmarkEl.scrollIntoView({block: \"center\"});\n      }\n    }\n\n  },[terms, begin, end, loading])\n\n\n  const scrollToLast = () => {\n    const lastBeginEl = document.getElementById(LAST_BEGIN_INDEX_ID);\n    if (lastBeginEl) {\n      lastBeginEl.scrollIntoView();\n      renderingLast = false;\n    } else {\n      renderingLast = true;\n    }\n  };\n\n  const goToBookmark = () => {\n    const bookmarkEl = document.getElementById(\"bookmark\");\n    if (bookmarkEl) {\n      bookmarkEl.scrollIntoView({block: \"center\", behavior: \"smooth\"});\n    }\n  };\n\n  const handleScroll = (e: any) => {\n    e.stopPropagation();\n    e.preventDefault();\n    if (e.target.id !== \"contentPanel\") {\n      return;\n    }\n    if (editingTerm) {\n      setEditingTerm(null);\n    }\n    // loading\n    if (!terms[begin] || !terms[end]) {\n      return;\n    }\n\n    if (renderingLast) {\n      scrollToLast();\n      return;\n    }\n\n    const top = e.target.scrollTop < 100;\n    if (top) {\n      if (begin > 0) {\n        setTermIndexBegin(Math.max(begin - loadTerms, 0));\n        return;\n      }\n    }\n    const bottom =\n      e.target.scrollHeight - e.target.scrollTop < e.target.clientHeight + 100;\n    if (bottom) {\n      if (end < termCount - 1) {\n        setTermIndexEnd(Math.min(end + loadTerms, termCount - 1));\n      }\n    }\n  };\n\n  // initial loading\n  if ((!terms[begin] || !terms[end]) && loading) {\n    return (\n      <div style={{height: \"50%\"}}>\n        <Loading/>\n      </div>\n    );\n  }\n  const termElements = [];\n  for (let i = begin; i <= end; i += 1) {\n    if (terms[i]) {\n      if (i % TermCountPerProgressPoint === 0) {\n        termElements.push(\n          <TermObserver index={i}>\n            <Term\n              onSpeak={onSpeak}\n              // eslint-disable-next-line react/no-array-index-key\n              key={i}\n              index={i}\n            />\n          </TermObserver>\n        );\n      } else {\n        termElements.push(\n          <Term\n            onSpeak={onSpeak}\n            // eslint-disable-next-line react/no-array-index-key\n            key={i}\n            index={i}\n          />\n        );\n      }\n    }\n  }\n\n  return (\n    <>\n      <div\n        onScroll={handleScroll}\n        id=\"contentPanel\"\n        className={styles.contentPanel}\n        ref={container}\n      >\n        {/* end loading */}\n        {!terms[begin] && <Loading className={styles.loading}/>}\n        {termElements}\n        {/* begin loading */}\n        {!terms[end] && <Loading className={styles.loading}/>}\n        <ProgressBar/>\n      </div>\n      {!editingTerm && <GoToBookmarkButton onClick={goToBookmark}/>}\n    </>\n  );\n}\n\nexport default connect(\n  (state:RootState) => {\n    if(!state.text.readingText) {\n      throw new Error(\"not reading text\")\n    }\n    return ({\n      terms: state.text.readingText.terms,\n      begin: state.text.readingText.termIndexBegin,\n      end: state.text.readingText.termIndexEnd,\n      termCount: state.text.readingText.termCount,\n      editingTerm: state.term.editingTerm,\n    });\n  },\n  {\n    getTextTerms: getTextTermsAction,\n    setTermIndexBegin: setTermIndexBeginAction,\n    setTermIndexEnd: setTermIndexEndAction,\n    setEditingTerm: setEditingTermAction,\n    setViewingTerm: setViewingTermAction,\n  }\n)(ContentPanel);\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./SingleBarChart.module.scss\";\n\nconst renderItem = (item: Item, sum: number) => {\n  const className = classNames(styles.section, item.color);\n  return item.value !== 0 ? (\n    <span\n      key={item.name}\n      className={className}\n      style={{\n        paddingLeft: \"0.2rem\",\n        paddingRight: \"0.2rem\",\n        height: \"100%\",\n        flex: item.value,\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        textAlign: \"center\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          height: \"0.85rem\",\n        }}\n      >\n        {item.value}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          height: \"0.85rem\",\n        }}\n      >\n        {`(${Math.round((item.value * 10000) / sum) / 100}%)`}\n      </div>\n    </span>\n  ) : null;\n};\n\ninterface Item {\n  name: string;\n  color: string;\n  value: number;\n}\n\ninterface Props {\n  data: Item[]\n}\n\nconst SingleBarChart: React.FC<Props> = ({data}) => {\n  const sum = data.map((i) => i.value).reduce((a, b) => a + b);\n  return (\n    <span className={`${styles.bar}`}>\n      {data.map((item) => renderItem(item, sum))}\n    </span>\n  );\n};\n\nexport default SingleBarChart;\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {TermLearningColor, TermLearningLevel} from \"../../../Enums\";\nimport SingleBarChart from \"../../SingleBarChart\";\nimport {loadReadingTexttermsCountByLearningLevelAction} from \"../../../Actions/TextAction\";\nimport styles from \"../../Term/Term.module.scss\";\nimport Loading from \"../../Loading/Loading\";\nimport {usePrevious} from \"../../../Hooks/usePrevious\";\nimport {Term} from \"../../../Reducers/TextReducer\";\nimport {RootState} from \"../../../RootReducer\";\n\nfunction getPracticeCount(termCount: number, termCountByLearningLevel: any) {\n  return (\n    termCount -\n    termCountByLearningLevel[TermLearningLevel.Skipped] -\n    termCountByLearningLevel[TermLearningLevel.Ignored] -\n    termCountByLearningLevel[TermLearningLevel.WellKnow]\n  );\n}\n\ninterface Props {\n  loadTermsCountByLearningLevel: Function;\n  termCount: number;\n  termsCountByLearningLevel: any;\n  textId: number;\n  terms: Term[];\n  bookmark: number;\n}\n\nconst TextStatistic: React.FC<Props> = (\n  {\n    loadTermsCountByLearningLevel,\n    termCount,\n    termsCountByLearningLevel,\n    textId,\n    terms,\n    bookmark\n  }) => {\n  React.useEffect(() => {\n    loadTermsCountByLearningLevel(textId);\n  }, [loadTermsCountByLearningLevel, textId])\n\n\n  const prevProps = usePrevious({bookmark, terms})\n  const bookmarkLL = terms[bookmark]?.learningLevel\n  const prevBookmarkLL = prevProps?.terms[prevProps.bookmark]?.learningLevel\n  React.useEffect(() => {\n    if (\n      bookmark === prevProps?.bookmark &&\n      terms[bookmark] &&\n      prevProps.terms[bookmark] &&\n      bookmarkLL !== prevBookmarkLL\n    ) {\n      loadTermsCountByLearningLevel(textId);\n    }\n  }, [terms, bookmarkLL, prevBookmarkLL, bookmark, prevProps,textId, loadTermsCountByLearningLevel])\n\n  if (!termsCountByLearningLevel) {\n    return (\n      <div style={{height: \"2rem\"}}>\n        <Loading/>\n      </div>\n    );\n  }\n  const termCountByLearningLevel = termsCountByLearningLevel;\n  const statistic: any = [];\n  const learningStatistic = [];\n  Object.keys(TermLearningLevel).forEach((learningLevel) => {\n    if (\n      learningLevel === \"Skipped\" ||\n      learningLevel === \"Ignored\" ||\n      learningLevel === \"WellKnow\"\n    )\n      return;\n    statistic.push({\n      name: learningLevel,\n      value: termCountByLearningLevel[TermLearningLevel[learningLevel]],\n      color: TermLearningColor[TermLearningLevel[learningLevel]],\n    });\n  });\n  const practice = getPracticeCount(termCount, termCountByLearningLevel);\n  learningStatistic.push({\n    name: \"Learned\",\n    color: styles.termLearned,\n    value: termCountByLearningLevel[TermLearningLevel.WellKnow],\n  });\n  learningStatistic.push({\n    name: \"Learning\",\n    color: styles.termLearning,\n    value: practice,\n  });\n  return (\n    <div style={{width: \"100%\"}}>\n      <SingleBarChart data={learningStatistic}/>\n      <SingleBarChart data={statistic}/>\n    </div>\n  );\n}\n\nexport default connect(\n  (state: RootState) => {\n    if (state.text.readingText == null) {\n      throw new Error(\"not reading text\");\n    }\n    return ({\n      textId: state.text.readingText.id,\n      terms: state.text.readingText.terms,\n      termsCountByLearningLevel: state.text.readingText.termsCountByLearningLevel,\n      bookmark: state.text.readingText.bookmark,\n      termCount: state.text.readingText.termCount,\n    });\n  },\n  {\n    loadTermsCountByLearningLevel: loadReadingTexttermsCountByLearningLevelAction,\n  }\n)(TextStatistic);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styles from \"./TextReadPage.module.scss\";\nimport { RootState } from \"../../../RootReducer\";\n\ninterface Props {\n  title: string;\n}\n\nconst TextTitle: React.FC<Props> = ({ title }) => {\n  if (window.innerWidth > 700) {\n    return <div className={styles.titleSection}>{title}</div>;\n  } else {\n    // don't show title on mobile to save space\n    return null;\n  }\n};\n\nexport default connect((state: RootState) => {\n  if (!state.text.readingText) throw new Error();\n  return {\n    title: state.text.readingText.title,\n  };\n})(TextTitle);\n","import React, {useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport {readTextAction} from \"../../../Actions/TextAction\";\nimport {setEditingTermAction} from \"../../../Actions/TermAction\";\nimport styles from \"./TextReadPage.module.scss\";\nimport TermEditForm from \"../../Forms/TermEditForm\";\nimport ContentPanel from \"./ContentPanel\";\nimport TextStatistic from \"./TextStatistic\";\nimport TextTitle from \"./TextTitle\";\nimport Loading from \"../../Loading/Loading\";\nimport {usePrevious} from \"../../../Hooks/usePrevious\";\nimport {Language, RootState} from \"../../../RootReducer\";\nimport {Term} from \"../../../Reducers/TextReducer\";\n\ninterface Props {\n  readText: Function;\n  match: any;\n  setEditingTerm: Function;\n  languages: Language[],\n  language?: string;\n  id?: number;\n  bookmark?: number;\n  term: object;\n  terms?: Term[];\n}\n\n/**\n * text read page.\n */\nconst TextReadPage: React.FC<Props> = (\n  {\n    readText,\n    match,\n    setEditingTerm, languages, language, id, bookmark, terms\n  }) => {\n  const {params: {textId}} = match;\n  useEffect(() => {\n    readText(textId);\n    return () => {\n      setEditingTerm(null);\n    };\n  }, [textId, readText, setEditingTerm]);\n\n  const [utt] = React.useState(new SpeechSynthesisUtterance())\n\n\n  const prevProps = usePrevious({language, languages})\n  useEffect(() => {\n    return () => {\n      const shouldSetLanguage =\n        prevProps?.languages !== languages ||\n        !prevProps?.language ||\n        !prevProps.languages ||\n        prevProps.language !== language;\n      if (shouldSetLanguage) {\n        setSpeechVoice();\n      }\n    };\n  } );\n\n  const setSpeechVoice = () => {\n    if (language && languages) {\n      const languageS = languages.find((l) => l.code === language);\n      const voices = window.speechSynthesis.getVoices();\n      if (languageS) {\n        utt.lang = languageS.speakCode;\n        if (languageS.speakCode === \"zh-CN\") {\n          const googleVoice = voices.find(\n            (v) => v.name === \"Google 普通话（中国大陆）\"\n          );\n          if (googleVoice) {\n            utt.voice = googleVoice;\n          } else {\n            utt.voice = voices.find((v) => v.lang === languageS.speakCode) || null;\n          }\n        } else if (languageS.speakCode === \"en-US\") {\n          const googleVoice = voices.find(\n            (v) => v.name === \"Google US English\"\n          );\n          if (googleVoice) {\n            utt.voice = googleVoice;\n          } else {\n            utt.voice = voices.find((v) => v.lang === languageS.speakCode) || null;\n          }\n        }\n      }\n    }\n  };\n\n  window.speechSynthesis.onvoiceschanged = setSpeechVoice;\n  const onSpeak = (term: Term) => {\n    utt.text = term.content;\n    window.speechSynthesis.cancel();\n    window.speechSynthesis.speak(utt);\n  };\n\n  if (!id) {\n    return <Loading/>;\n  }\n\n  return (\n    <div className={styles.readPane} id=\"readPanel\">\n      <TextTitle/>\n      <TextStatistic/>\n      <ContentPanel onSpeak={onSpeak} textId={id}/>\n      {terms && <TermEditForm className={styles.termEditForm}/>}\n    </div>\n  );\n}\n\nexport default connect(\n  (state: RootState) => {\n    if (state.text.readingText) {\n      return {\n        terms: state.text.readingText.terms,\n        language: state.text.readingText.languageCode,\n        id: state.text.readingText.id,\n        languages: state.language.languages,\n        bookmark: state.text.readingText.bookmark,\n      };\n    }\n    return {languages: state.language.languages};\n  },\n  {\n    readText: readTextAction,\n    setEditingTerm: setEditingTermAction,\n  }\n)(React.memo(TextReadPage, (prevProps, nextProps) => {\n  const {terms, id, language, languages} = prevProps;\n  return !(\n    terms !== nextProps.terms ||\n    id !== nextProps.id ||\n    languages !== nextProps.languages ||\n    language !== nextProps.language\n  )\n}))\n","/**\n * text read page.\n */\nimport TextReadPage from \"./TextReadPage\";\n\nexport default TextReadPage;\n"],"sourceRoot":""}